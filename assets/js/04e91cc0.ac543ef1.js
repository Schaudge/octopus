(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[327],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,g=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(g,o(o({ref:t},u),{},{components:n})):a.createElement(g,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9838:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),o=["components"],l={id:"bamout",title:"Realigned BAMs"},s={unversionedId:"guides/bamout",id:"guides/bamout",isDocsHomePage:!1,title:"Realigned BAMs",description:"Octopus can generate evidence BAMs which can be helpful to understand why a call has been made. Here's an example:",source:"@site/docs/guides/bamout.md",sourceDirName:"guides",slug:"/guides/bamout",permalink:"/octopus/docs/guides/bamout",editUrl:"https://github.com/${organizationName}/${projectName}/edit/${branch}/website/docs/guides/bamout.md",version:"current",frontMatter:{id:"bamout",title:"Realigned BAMs"},sidebar:"docs",previous:{title:"Hard Thresholds",permalink:"/octopus/docs/guides/filtering/thresholds"},next:{title:"Targeted Calling",permalink:"/octopus/docs/guides/advanced/targeted"}},p=[],u={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Octopus can generate evidence BAMs which can be helpful to understand why a call has been made. Here's an example:"),(0,i.kt)("p",null,"[","[images/evidence_bam.png]","]"),(0,i.kt)("p",null,"Two conditions must be satisfied in order to make evidence BAMs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"All input BAMs must be single sample."),(0,i.kt)("li",{parentName:"ul"},"An output file (",(0,i.kt)("inlineCode",{parentName:"li"},"--output"),") must be specified (i.e. no stdout output).")),(0,i.kt)("p",null,"Evidence BAMs are requested using the ",(0,i.kt)("inlineCode",{parentName:"p"},"--bamout")," option. The argument to ",(0,i.kt)("inlineCode",{parentName:"p"},"--bamout")," changes slightly depending on whether you're calling one or more samples: If you're only calling a single sample then the argument to ",(0,i.kt)("inlineCode",{parentName:"p"},"--bamout")," is a ",(0,i.kt)("em",{parentName:"p"},"file")," path to output to, e.g:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ octopus -R hs37d5.fa -I NA12878.bam -o octopus.vcf --bamout octopus.bam\n")),(0,i.kt)("p",null,"For multiple samples the argument to ",(0,i.kt)("inlineCode",{parentName:"p"},"--bamout")," is a ",(0,i.kt)("em",{parentName:"p"},"directory")," path, e.g:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ octopus -R hs37d5.fa -I NA12878.bam -o octopus.vcf --bamout minibams\n")),(0,i.kt)("p",null,"Evidence BAMs with the same names as the input BAMs will be written to this directory, so this cannot be a directory where any of the input BAMs are."),(0,i.kt)("p",null,"Octopus adds several useful annotations to realigned reads:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"HP")),(0,i.kt)("td",{parentName:"tr",align:"left"},"A list (",(0,i.kt)("inlineCode",{parentName:"td"},",")," separated) of haplotype IDs that the read is inferred to originate from. A haplotype ID, which is zero-indexed, corresponds to column in the ",(0,i.kt)("inlineCode",{parentName:"td"},"GT")," field of the affiliated phased VCF. A haplotype ID indicates that the read was unambiguously assigned to the haplotype, while multiple values indicate that the read could equally well be assigned to any of the listed haplotype.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"MD")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Reference free alignments. As defined in the ",(0,i.kt)("a",{parentName:"td",href:"https://samtools.github.io/hts-specs/SAMtags.pdf"},"SAM specficiation"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"md")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Like MD but alignment is relative to the inferred haplotype rather than the reference (i.e. mismatches are inferred sequencing errors).")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"hc")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The CIGAR alignment to the inferred haplotype.")))),(0,i.kt)("p",null,"Coloring alignments by ",(0,i.kt)("inlineCode",{parentName:"p"},"HP")," is a useful way to visualise realigned evidence BAMs:"),(0,i.kt)("p",null,"[","[images/tagged_evidence_bam.png]","]"),(0,i.kt)("p",null,"In this example we see reads realigned to a HLA-C region. Since all the variants in this region are contained in the same phase set (calls were produced using ",(0,i.kt)("inlineCode",{parentName:"p"},"--lagging-level AGGRESSIVE"),"), we can easily see that all heterozygous variant alleles occur on the same haplotype, other than a single bi-allelic allele. The read coloured green was not assigned uniquely to either called haplotype, and is likely miss-mapped. "),(0,i.kt)("p",null,"By default, only reads supporting regions containing called variation are realigned. However, Octopus can also copy reads overlapping regions where no variation was called using the ",(0,i.kt)("inlineCode",{parentName:"p"},"--bamout-type FULL")," command. Only primary reads are used for BAM realignment."))}d.isMDXComponent=!0}}]);